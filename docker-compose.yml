services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: nodejs-api-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nodejs_api_demo}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nodejs_api_demo}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nodejs-api-server
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      # Database connection components - URL constructed at runtime
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-nodejs_api_demo}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # DATABASE_URL will be constructed from above components in the application
      JWT_SECRET: ${JWT_SECRET:-change-this-jwt-secret-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      SWAGGER_ENABLED: ${SWAGGER_ENABLED:-true}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Database administration tool
  adminer:
    image: adminer:4.8.1
    container_name: nodejs-api-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - postgres
    networks:
      - api-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local

networks:
  api-network:
    driver: bridge